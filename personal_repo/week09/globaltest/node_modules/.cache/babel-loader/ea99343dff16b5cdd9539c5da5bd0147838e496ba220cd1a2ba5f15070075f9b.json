{"ast":null,"code":"var _jsxFileName = \"/Users/hidongmin37/Desktop/project_react_team_dongmin/DongMin/personal_repo/week09/globaltest/src/domain/2_context/components/pages/Q2.js\",\n  _s = $RefreshSig$();\nimport NavigateButton from \"../../../../components/NavigateButton\";\nimport ContextQ2Form from \"../atom/Q2/Form\";\nimport ContextQ2Form3 from \"../atom/Q2/Form3\";\nimport { useUserList } from \"../../../../store/3_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ContextQ2Page = () => {\n  _s();\n  /*\n    문제 2 - 2\n      1. Form1에서 값을 입력하면 userList에 데이터가 추가되도록 구현해보세요\n      2. Form2에서 버튼을 클릭하면 userList의 각 요소인 객체에 isEdit: true의 속성이 추가되도록 구현해보세요\n      3. Form3에서 reset 버튼을 클릭하면 userList를 초기화 시키도록 구현해보세요\n      4. 제출 버튼을 누르면 isEdit true인 userList만 console.log로 출력해보세요\n        (단, isEdit이 true인 데이터도 전역으로 관리해주세요.)\n  */\n\n  /*\n    단, userList 상태 관리는 전역으로 관리하고 비즈니스 로직도 분리하기 위해\n    useReducer, useContext를 사용하여 구현해보세요\n     (일반 state를 사용하는 문제가 아니기 때문에 전역으로 상태관리를 할 수 있도록 해주세요)\n    관련 로직은 src/store/3_context.js에 구현해주세요\n  */\n  const [userList, setUserList] = useUserList();\n  const handleSubmit = () => {\n    const viewList = userList.filter(v => v.isEdit == true);\n    console.log(viewList);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uBB38\\uC81C 2 - 2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextQ2Form, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextQ2Form3, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"32px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleSubmit();\n        },\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavigateButton, {\n      isLastPage: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ContextQ2Page, \"BiPkrZFdYKjBb2jn0vfdDL9ynXw=\", false, function () {\n  return [useUserList];\n});\n_c = ContextQ2Page;\nexport default ContextQ2Page;\nvar _c;\n$RefreshReg$(_c, \"ContextQ2Page\");","map":{"version":3,"names":["NavigateButton","ContextQ2Form","ContextQ2Form3","useUserList","jsxDEV","_jsxDEV","Fragment","_Fragment","ContextQ2Page","_s","userList","setUserList","handleSubmit","viewList","filter","v","isEdit","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onClick","isLastPage","_c","$RefreshReg$"],"sources":["/Users/hidongmin37/Desktop/project_react_team_dongmin/DongMin/personal_repo/week09/globaltest/src/domain/2_context/components/pages/Q2.js"],"sourcesContent":["import NavigateButton from \"../../../../components/NavigateButton\";\nimport ContextQ2Form from \"../atom/Q2/Form\";\nimport ContextQ2Form3 from \"../atom/Q2/Form3\";\nimport { useUserList } from \"../../../../store/3_context\";\nconst ContextQ2Page = () => {\n  /*\n    문제 2 - 2\n      1. Form1에서 값을 입력하면 userList에 데이터가 추가되도록 구현해보세요\n      2. Form2에서 버튼을 클릭하면 userList의 각 요소인 객체에 isEdit: true의 속성이 추가되도록 구현해보세요\n      3. Form3에서 reset 버튼을 클릭하면 userList를 초기화 시키도록 구현해보세요\n      4. 제출 버튼을 누르면 isEdit true인 userList만 console.log로 출력해보세요\n        (단, isEdit이 true인 데이터도 전역으로 관리해주세요.)\n  */\n\n  /*\n    단, userList 상태 관리는 전역으로 관리하고 비즈니스 로직도 분리하기 위해\n    useReducer, useContext를 사용하여 구현해보세요\n\n    (일반 state를 사용하는 문제가 아니기 때문에 전역으로 상태관리를 할 수 있도록 해주세요)\n    관련 로직은 src/store/3_context.js에 구현해주세요\n  */\n  const [userList, setUserList] = useUserList();\n  const handleSubmit = () => {\n    const viewList = userList.filter((v) => v.isEdit == true);\n    console.log(viewList);\n  };\n  return (\n    <>\n      <h2>문제 2 - 2</h2>\n      <ContextQ2Form />\n      <ContextQ2Form3 />\n      <div\n        style={{\n          marginTop: \"32px\",\n        }}\n      >\n        <button\n          onClick={() => {\n            handleSubmit();\n          }}\n        >\n          SUBMIT\n        </button>\n      </div>\n      <NavigateButton isLastPage />\n    </>\n  );\n};\nexport default ContextQ2Page;\n"],"mappings":";;AAAA,OAAOA,cAAc,MAAM,uCAAuC;AAClE,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC1D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;EAEE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,WAAW,EAAE;EAC7C,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,IAAI,IAAI,CAAC;IACzDC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACvB,CAAC;EACD,oBACER,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACjBlB,OAAA,CAACJ,aAAa;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjBlB,OAAA,CAACH,cAAc;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAClBlB,OAAA;MACEmB,KAAK,EAAE;QACLC,SAAS,EAAE;MACb,CAAE;MAAAN,QAAA,eAEFd,OAAA;QACEqB,OAAO,EAAEA,CAAA,KAAM;UACbd,YAAY,EAAE;QAChB,CAAE;QAAAO,QAAA,EACH;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACL,eACNlB,OAAA,CAACL,cAAc;MAAC2B,UAAU;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA,gBAC5B;AAEP,CAAC;AAACd,EAAA,CA3CID,aAAa;EAAA,QAiBeL,WAAW;AAAA;AAAAyB,EAAA,GAjBvCpB,aAAa;AA4CnB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}